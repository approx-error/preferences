#############################################
# PYTHON STRCUTURE SNIPPETS BY approx-error #
#############################################

#############
# FUNCTIONS #
#############

snippet fdef "Define a function"
def ${1:function}(${2:variables}) -> ${3:return_type}:
	'''
	${4:docstring}
	'''
	${5:pass}
	return $0
endsnippet

snippet pdef "Define a procedure (no return value)"
def ${1:procedure}(${2:variables}) -> None:
	'''
	${3:docstring}
	'''
	${4:pass}
	return None
$0
endsnippet

###########
# CLASSES #
###########

snippet cls "Simple class definition"
class ${1:Class}(${2:object}):
	'''
	${3:docstring}
	'''
	${4:pass}
$0
endsnippet

snippet class "Class definition with constructor"
class ${1:Class}(${2:object}):
	'''
	${3:doctring}
	'''
	def __init__(self, ${4:attributes}):
		${5:super($1, self).__init__()}
		self.${6:attribute} = $6
		$7
	$0
endsnippet

snippet mdef "Class method definition"
def ${1:method}(self, ${2:arguments}):
	'''
	${3:docstring}
	'''
	${4:pass}
$0
endsnippet

snippet dmdef "Dunder method definition"
def __${1:init}__(self, ${2:arguments}):
	'''
	${3:docstring}
	'''
	${4:pass}
$0
endsnippet

snippet property "Make a new property with a setter"
@property
def ${1:prop}(self) -> ${2:type}:
	'''
	${3:doctstring}
	'''
	return self._$1

@$1.setter
def $1(self, value: $2):
	self._$1 = value
$0
endsnippet

snippet container "Container type methods"
def __len__(self):
	${1:pass}

def __getitem__(self, key):
	${2:pass}

def __setitem__(self, key, value):
	${3:pass}

def __delitem__(self, key):
	${4:pass}

def __iter__(self):
	${5:pass}

def __reversed__(self):
	${6:pass}

def __contains__(self, item):
	${7:pass}
$0
endsnippet

snippet context "Context manager methods"
def __enter__(self):
	${1:pass}

def __exit__(self, exc_type, exc_value, traceback):
	${2:pass}
$0
endsnippet

snippet attribute "Methods for customizing attribute access"
def __getattr__(self, name):
	${1:pass}

def __setattr__(self, name, value):
	${2:pass}

def __delattr__(self, name):
	${3:pass}
$0
endsnippet

snippet descriptor "Methods implementing descriptors"
def __get__(self, instance, owner):
	${1:pass}

def __set__(self, instance, value):
	${2:pass}

def __delete__(self, instance):
	${3:pass}
$0
endsnippet

snippet comparison "Methods implementing rich comparison"
def __eq__(self, other):
	${1:pass}

def __ne__(self, other):
	${2:pass}

def __lt__(self, other):
	${3:pass}

def __le__(self, other):
	${4:pass}

def __gt__(self, other):
	${5:pass}

def __ge__(self, other):
	${6:pass}

def __cmp__(self, other):
	${7:pass}
$0
endsnippet

snippet representation "Methods implementing string representation"
def __repr__(self):
	${1:pass}

def __str__(self):
	${2:pass}

def __unicode__(self):
	${3:pass}
$0
endsnippet

# note: reflected operands and augmented arithmeitc assignements have been
# intentionally ommited to reduce verbosity.
snippet numeric "Methods for emulating a numeric type"
def __add__(self, other):
	${1:pass}

def __sub__(self, other):
	${2:pass}

def __mul__(self, other):
	${3:pass}

def __div__(self, other):
	${4:pass}

def __truediv__(self, other):
	${5:pass}

def __floordiv__(self, other):
	${6:pass}

def __mod__(self, other):
	${7:pass}

def __divmod__(self, other):
	${8:pass}

def __pow__(self, other):
	${9:pass}

def __lshift__(self, other):
	${10:pass}

def __rshift__(self, other):
	${11:pass}

def __and__(self, other):
	${12:pass}

def __xor__(self, other):
	${13:pass}

def __or__(self, other):
	${14:pass}

def __neg__(self):
	${15:pass}

def __pos__(self):
	${16:pass}

def __abs__(self):
	${17:pass}

def __invert__(self):
	${18:pass}

def __complex__(self):
	${19:pass}

def __int__(self):
	${20:pass}

def __long__(self):
	${21:pass}

def __float__(self):
	${22:pass}

def __oct__(self):
	${22:pass}

def __hex__(self):
	${23:pass}

def __index__(self):
	${24:pass}

def __coerce__(self, other):
	${25:pass}
$0
endsnippet

################
# MAIN PROGRAM #
################

snippet main "Main program block"
if __name__ == '__main__':
	${1:main()}
$0
endsnippet
