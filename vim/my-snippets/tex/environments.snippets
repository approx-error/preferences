##############################################
# LaTeX ENVIRONMENT SNIPPETS BY approx-error #
##############################################

# Defining a helper function to only snippets work inside latex math mode:

global !p

def math(in_math = True):
	check_mathzone = vim.eval('vimtex#syntax#in_mathzone()')
	if in_math:
		return check_mathzone == '1'
	else:
		return check_mathzone == '0'



def section_generator(section_format: str, section_type = 'alph', section_label = 'Exercise') -> str:
	'''
	Generate sections with subsections according to 'section_format' in the style
	of 'section_type' and with common label 'section_label'

	Example: section_format = 'SssSssSS' would create four sections
	with the first two having to subsections. If section_type = 'alpha' or = 'a',
	and section_label = 'Exercise', the sections would be labeled as:
	Exercise 1 
	a) 
	b) 
	Exercise 2 
	a) 
	b) 
	Exercise 3
	Exercise 4
	'''
	
    # Constants
	ALPHABET = 'abcdefghijklmnopqrstuvwxyz'
	CAP_ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
	ROMAN = ['i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x', 
            'xi', 'xii', 'xiii', 'xiv', 'xv', 'xvi', 'xvii', 'xviii', 'xix', 'xx',
            'xxi', 'xxii', 'xxiii', 'xxiv', 'xxv', 'xxvi', 'xxvii', 'xxviii', 'xxix', 'xxx']
	CAP_ROMAN = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X',
            'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX', 'XX',
            'XXI', 'XXII', 'XXIII', 'XXIV', 'XXV', 'XXVI', 'XXVII', 'XXVIII', 'XXIX', 'XXX']

    # Generate section hierarchy
	section_count = section_format.count('S')
	section_hierarchy = [0 for _ in range(section_count)]
	section_index = -1
	for symbol in section_format:
		if symbol == 's':
			section_hierarchy[section_index] += 1
		if symbol == 'S':
			section_index += 1

    # Generate latex:
	output_str = ''
	for section in enumerate(section_hierarchy):
		current_section = section[0] + 1
		output_str += f'\\section*\u007b{section_label} {current_section}\u007d\n\n'
		for subsection in range(section[1]):
			if section_type in ['alph', 'a']:
				output_str += f'\\subsection*\u007b{ALPHABET[subsection]})\u007d\n\n\n'
			elif section_type in ['Alph', 'A']:
				output_str += f'\\subsection*\u007b{CAP_ALPHABET[subsection]})\u007d\n\n\n'
			elif section_type in ['rom', 'r']:
				output_str += f'\\subsection*\u007b{ROMAN[subsection]}.)\u007d\n\n\n'
			elif section_type in ['Rom', 'R']:
				output_str += f'\\subsection*\u007b{CAP_ROMAN[subsection]}.)\u007d\n\n\n'
			else:
				return f'Section type {section_type} not recognized!' 
	return output_str
		
endglobal

# Now adding 'context "math()"' above a snippet will only make it work inside math mode

######################
# Degugging snippets #
######################


snippet testmath "Return whether or not cursor is in mathzone"
`!p snip.rv = math()`
endsnippet

snippet testnomath "Return wheter or not cursor is not in mathzone"
`!p snip.rv = math(False)`
endsnippet

###########################
# General begin-statement #
###########################

snippet beg "Begin an environment"
\\begin{${1:environment}}
	${0:${VISUAL}}
\\end{$1}
endsnippet

#########################
# Labels and references #
#########################

snippet lab "Add a label" i
\\label{${1:eq/fig/tab/sec}:$2}$0
endsnippet

snippet ref "Refer to an object" i
\\ref{${1:eq/fig/tab/sec}:$2}$0
endsnippet

############
# Sections #
############

# Usage of the section hieracrhy snippet:
# 1. Type out the arguments you wish to pass to the function 'section_generator' that is defined above separated by spaces
# 	 Since the function 'section_generator' has two default value arguments you need to type 1 to 3 strings of characters
# 2. Enter visual mode and select all the arguments you have typed
# 3. Press the g:UltiSnipsExpandTrigger button (has been mapped to the TAB key), to store the selection into the $VISUAL variable
#    You will simultaneously enter insert mode
# 4. Write the name of the snippet you wish to invoke and press the g:UltiSnipsExpandTrigger button (again, the TAB key) to invoke the snippet
# 5. The snippet uses the string stored in $VISUAL (accessed as snip.v.text in python) to call the function 'section_generator' and then
#    prints the output of the function onto the screen with snip.rv

context "math(False)"
snippet sh "Make a section hierarchy" bi
$0
`!p inputs = snip.v.text.split(' '); snip.rv = section_generator(*inputs)`
endsnippet

context "math(False)"
snippet s "New section" bi
\\section{$1}
$0
endsnippet


context "math(False)"
snippet ss "New unnumbered section" bi
\\section*{$1}
$0
endsnippet


context "math(False)"
snippet su "New subsection" bi
\\subsection{$1}
$0
endsnippet


context "math(False)"
snippet ssu "New unnumbered subsection" bi
\\subsection*{$1}
$0
endsnippet


context "math(False)"
snippet suu "New subsubsection" bi
\\subsubsection{$1}
$0
endsnippet


context "math(False)"
snippet ssuu "New unnumbered subsubsection" bi
\\subsubsection*{$1}
$0
endsnippet

#########################
# Document environments #
#########################


context "math(False)"
snippet doc "Document" bi
\\begin{document}
	${0:${VISUAL}}
\\end{document}
endsnippet


snippet com "Block Comment" i
\\begin{comment}
	${0:${VISUAL}}
\\end{comment}
endsnippet


context "math(False)"
snippet enum "Enumerate" i
\\begin{enumerate}
	\\item $1
	\\item $0
\\end{enumerate}
endsnippet


context "math(False)"
snippet item "Itemize" 
\\begin{itemize}
	\\item $1
	\\item $0
\\end{itemize}
endsnippet

context "math(False)"
snippet it "New item in an itemize or enumerate environment"
\\item $0
endsnippet


context "math(False)"
snippet table "Table environment" b
\\begin{table}[${1:htpb}]
	\\centering
	\\caption{${2:caption}}
	\\label{tab:${3:label}}

	\\begin{${4:t}${4/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}{${5:c}}
	$0${5/(?<=.)(c|l|r)|./(?1: & )/g}
	\\end{$4${4/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}
\\end{table}
endsnippet


context "math(False)"
snippet tab "tabular / array environment" b
\\begin{${1:t}${1/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}{${2:c}}
$0${2/(?<=.)(c|l|r)|./(?1: & )/g}
\\end{$1${1/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}
endsnippet


context "math(False)"
snippet fig "Figure environment" bi
\\begin{figure}[${1:htpb}]
	\\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\\caption{${4:$3}}
	\\label{fig:${5:${3/\W+/-/g}}}
\\end{figure}
endsnippet

context "math(False)"
snippet sfig "Subfigure environment" bi
\\begin{figure}[${1:htpb}]
	\\centering
	\\caption{$2}
	\\label{fig:$3}
	\\begin{subfigure}[t]{0.4\\textwidth}
		\\includegraphics[width=\\textwidth]{$4}
		\\caption{$5}
		\\label{fig:$6}
	\\end{subfigure}
	\\quad
	\\begin{subfigure}[t]{0.4\\textwidth}
		\\includegraphics[width=\\textwidth]{$7}
		\\caption{$8}
		\\label{fig:$9}
	\\end{subfigure}
\\end{figure}
endsnippet

context "math(False)"
snippet subf "Single subfigure environment" bi
\\begin{subfigure}[${1:tcb}]{${2:0.4}\\textwidth}
	\\includegraphics[width=\\textwidth]{$3}
	\\caption{$4}
	\\label{fig:$5}
\\end{subfigure}
endsnippet

#####################
# Math environments #
#####################

context "math(False)"
snippet ,, "Inline math" Ai
\$$1\$$0
endsnippet

context "math(False)"
snippet .. "Display math" Ai
\\[$1\\]$0
endsnippet

context "math(False)"
snippet e "Equation environment" 
\\begin{equation}
	${0:${VISUAL}}
\\end{equation}
endsnippet


context "math(False)"
snippet ee "Unnumbered equation" 
\\begin{equation*}
	${0:${VISUAL}}
\\end{equation*}
endsnippet


context "math(False)"
snippet a "Align environment" 
\\begin{align}
	${0:${VISUAL}}
\\end{align}
endsnippet


context "math(False)"
snippet aa "Unnumbered align environment" 
\\begin{align*}
	${0:${VISUAL}}
\\end{align*}
endsnippet


context "math(False)"
snippet m "Multiline environment for long expressions without specified alignment points" 
\\begin{multiline}
	${0:${VISUAL}}
\\end{multiline}
endsnippet

context "math(False)"
snippet mm "Unnumbered multiline environment" 
\\begin{multiline*}
	${0:${VISUAL}}
\\end{multiline*}
endsnippet

context "math(False)"
snippet ans "Answer box ie. boxed inside equation environment"
\\begin{equation}
	\\boxed{${0:${VISUAL}}}
\\end{equation}
endsnippet

context "math(False)"
snippet aans "Unnumbered answer box"
\\begin{equation*}
	\\boxed{${0:${VISUAL}}}
\\end{equation*}
endsnippet

context "math(False)"
snippet mans "Multiline answer box ie. aligned inside boxed inside equation environment"
\\begin{equation}
	\\boxed{
	\\begin{aligned}
		${0:${VISUAL}}	
	\\end{aligned}
	}
\\end{equation}
endsnippet

context "math(False)"
snippet mmans "Unnumbered multiline answer box"
\\begin{equation*}
	\\boxed{
	\\begin{aligned}
		${0:${VISUAL}}	
	\\end{aligned}
	}
\\end{equation*}
endsnippet

############################
# Within math environments #
############################

context "math()"
snippet can "Cancel terms" Ai
\\cancel{${0:${VISUAL}}}
endsnippet

context "math()"
snippet box "Boxed equation" A
\\boxed{${0:${VISUAL}}}
endsnippet

context "math()"
snippet ali "Aligned environment for boxing multiple equations: \boxed{aligned}" A 
\\begin{aligned}
	${0:${VISUAL}}
\\end{aligned}
endsnippet

context "math()"
snippet itt "Intertext" A
\\intertext{${0:${VISUAL}}}
endsnippet

context "math()"
snippet mat "Smart matrix environment" A
\\begin{${1:p/b/v/V/B/small}matrix}
	${0:${VISUAL}}
\\end{$1matrix}
endsnippet

context "math()"
snippet cas "Cases environment" A
\\begin{cases}
	${0:${VISUAL}}
\\end{cases}
endsnippet

context "math()"
snippet piwi "Piecewise function" A
\\begin{cases}
	${1:equation}, &\\text{ jos }${2:case}\\
	${0:${VISUAL}}
\\end{cases}
endsnippet

context "math()"
snippet spl "Multi-line equation with only one number" A
\\begin{split}
	${0:${VISUAL}}
\\end{split}
endsnippet

