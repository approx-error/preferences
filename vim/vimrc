" Disable vi compatibility
set nocompatible

" Enable file type detection, filetype plugins and indentation
filetype on
filetype plugin on
filetype indent on

" Character encoding, syntax highlighting and colorscheme
set encoding=utf-8
syntax on
set background=dark
"set background=light
"colorscheme habamax

" Line numbering and highlighting
set number
set relativenumber
set cursorline
" set cursorcolumn

" Expanding tabs, indentation and shifting text
set expandtab	" Tabs expand as spaces (actual tab with ^v+Tab)  
set shiftwidth=4	" Shifting text in visual mode with < and >
set tabstop=4	" Tab width measured in spaces


" Show current mode and commands
set showmode
set showcmd

" Allow putting 1000 lines at most (<1000) and store viminfo in
" XDG compatible location
set viminfo='100,<1000,s100,h,n~/.local/state/vim/viminfo

" Make :find command into a fuzzy finder
set path+=**	" Adds ** to the path variable, so vim searches recursively through directories when using the :find command
set wildmenu	" Adds a tab-completion menu to commands including the :find command

" PLUGINS
call plug#begin()
	Plug 'lervag/vimtex'
	Plug 'preservim/nerdtree'
	Plug 'SirVer/ultisnips'
	Plug 'myusuf3/numbers.vim'
    Plug 'morhetz/gruvbox'
    Plug 'NLKNguyen/papercolor-theme'
    Plug 'lifepillar/vim-solarized8'
call plug#end()

" Third party colorschemes

" Gruvbox (light/dark):
autocmd vimenter * ++nested colorscheme gruvbox
let g:gruvbox_contrast_dark = 'medium'
"let g:gruvbox_contrast_light = 'medium'

" Papercolor (light/dark):
" colorscheme PaperColor

" Solarized8 (light/dark):
" autocmd vimenter * ++nested colorscheme solarized8

" vimtex stuff
let g:tex_flavor = 'latex'
" let g:vimtex_view_method='zathura'
" let g:vimtex_quickfix_mode=0
" set conceallevel=1
" let g:tex_conceal='abdmg'   

" UltiSnips stuff
let g:UltiSnipsExpandTrigger       = '<Tab>'    " use Tab to expand snippets
"let g:UltiSnipsJumpForwardTrigger  = '<Tab>'    " use Tab to move forward through tabstops
"let g:UltiSnipsJumpOrExpandTrigger = '<Tab>'    " If can both exapnd and jump, prioritize jumping
let g:UltiSnipsExpandOrJumpTrigger = '<Tab>'    " If can both exapnd and jump, prioritize expanding
let g:UltiSnipsJumpBackwardTrigger = '<S-Tab>'  " use Shift-Tab to move backward through tabstops
let g:UltiSnipsListSnippets = '<c-Tab>'         " use Ctrl-Tab to list snippets
let g:UltiSnipsSnippetDirectories = [$HOME.'/preferences/vim/my-snippets']  " Set custom UltiSnips location

" Numbers.vim stuff
let g:numbers_exclude = ['nerdtree']
